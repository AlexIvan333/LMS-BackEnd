name: Microservices CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Make Gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      # Delete old artifact if it exists
      - name: Delete existing build-artifacts (if any)
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts)

          ARTIFACT_ID=$(echo "$RESPONSE" | jq -r '.artifacts // [] | map(select(.name == "build-artifacts")) | .[0].id // empty')
          
          if [ ! -z "$ARTIFACT_ID" ]; then
            echo "Deleting artifact with ID: $ARTIFACT_ID"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID
          else
            echo "No existing artifact found to delete."
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/*.jar
          retention-days: 1

  dockerize:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build all services
        run: |
          docker compose -f auth_service/docker-compose.auth.yml build
          docker compose -f course_service/docker-compose.course.yml build
          docker compose -f assignment_service/docker-compose.assignment.yml build
          docker compose -f resource_service/docker-compose.resource.yml build
          docker compose -f api_gateway/docker-compose.gateway.yml build

      # Optional: Push Docker images
      # - name: Push images to Docker Hub
      #   run: |
      #     docker tag auth_service yourname/auth_service:latest
      #     docker push yourname/auth_service:latest
      #     # repeat for other services

      - name: Run all services
        run: |
          docker network create backend-network || true
          docker compose -f auth_service/docker-compose.auth.yml up -d
          docker compose -f course_service/docker-compose.course.yml up -d
          docker compose -f assignment_service/docker-compose.assignment.yml up -d
          docker compose -f resource_service/docker-compose.resource.yml up -d
          docker compose -f api_gateway/docker-compose.gateway.yml up -d

      - name: Wait for services to start
        run: sleep 20

      # Optional: run integration tests here

      - name: Tear down containers
        if: always()
        run: |
          docker compose -f api_gateway/docker-compose.gateway.yml down
          docker compose -f resource_service/docker-compose.resource.yml down
          docker compose -f assignment_service/docker-compose.assignment.yml down
          docker compose -f course_service/docker-compose.course.yml down
          docker compose -f auth_service/docker-compose.auth.yml down
