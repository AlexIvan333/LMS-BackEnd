services:
  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend-network
  # API Gateway
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "8090:8080"
    depends_on:
      - eureka-server
    networks:
      - backend-network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
  # Auth Service

  # PostgreSQL for Auth Service
  postgres_auth:
    image: postgres:15
    container_name: postgres_auth
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: lms_auth
    ports:
      - "5434:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    restart: always
    networks:
      - backend-network

  # MongoDB for Auth Service
  mongodb_auth:
    image: mongo:6.0
    container_name: mongodb_auth
    environment:
      MONGO_INITDB_DATABASE: lms_auth
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27019:27017"
    volumes:
      - mongo_auth_data:/data/db
    restart: always
    networks:
      - backend-network

  # Auth Service
  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "8091:8081"
    environment:
      SERVER_PORT: 8081
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_auth:5432/lms_auth
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATA_MONGODB_HOST: mongodb_auth
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: lms_auth
      SPRING_DATA_MONGODB_USERNAME: admin
      SPRING_DATA_MONGODB_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: auth-service
    restart: unless-stopped
    depends_on:
      - postgres_auth
      - mongodb_auth
      - eureka-server
    networks:
      - backend-network
  # PostgreSQL for Course Service
  postgres_courses:
    image: postgres:15
    container_name: postgres_courses
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: lms_course
    ports:
      - "5435:5432"
    volumes:
      - postgres_courses_data:/var/lib/postgresql/data
    restart: always
    networks:
      - backend-network
  # Course Service
  course_service:
    build:
      context: ./course_service
      dockerfile: Dockerfile
    container_name: course_service
    ports:
      - "8092:8082"
    environment:
      SERVER_PORT: 8082
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_courses:5432/lms_course
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: course-service
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    restart: unless-stopped
    depends_on:
      - postgres_courses
      - eureka-server
    networks:
      - backend-network

  # PostgreSQL for Assignment Service
  postgres_assignment:
    image: postgres:15
    container_name: postgres_assignment
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: lms_assignment
    ports:
      - "5436:5432"
    volumes:
      - postgres_assignment_data:/var/lib/postgresql/data
    restart: always
    networks:
      - backend-network
  # Assignment Service
  assignment_service:
    build:
      context: ./assignment_service
      dockerfile: Dockerfile
    container_name: assignment_service
    ports:
      - "8093:8083"
    environment:
      SERVER_PORT: 8083
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_assignment:5432/lms_assignment
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: assignment-service
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    restart: unless-stopped
    depends_on:
      - postgres_assignment
      - eureka-server
    networks:
      - backend-network

  # MongoDB for Resource Service
  mongodb_resource:
    image: mongo:6.0
    container_name: mongodb_resource
    environment:
      MONGO_INITDB_DATABASE: lms_resource
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27020:27017"
    volumes:
      - mongo_resource_data:/data/db
    restart: always
    networks:
      - backend-network

  # Resource Service
  resource_service:
    build:
      context: ./resource_service
      dockerfile: Dockerfile
    container_name: resource_service
    ports:
      - "8094:8084"
    environment:
      SERVER_PORT: 8084
      SPRING_DATA_MONGODB_HOST: mongodb_resource
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: lms_resource
      SPRING_DATA_MONGODB_USERNAME: admin
      SPRING_DATA_MONGODB_PASSWORD: password
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: resource-service
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    restart: unless-stopped
    depends_on:
      - mongodb_resource
      - eureka-server
    networks:
      - backend-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    networks:
      - backend-network
  #Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    restart: unless-stopped
    networks:
      - backend-network

  kafka-cli:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-cli
    depends_on:
      - kafka
    entrypoint: /bin/sh
    tty: true
    networks:
      - backend-network

  #Dashboards monitoring and k6 performance
  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend-network

  grafana:
    image: grafana/grafana:latest
    container_name: monitoring_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=Alex&030303
      - GF_PROVISIONING_ENABLED=true
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - backend-network

#  k6:
#    image: grafana/k6:latest
#    container_name: monitoring_k6
#    command: [ "run", "/k6/scripts/index.js" ]
#    volumes:
#      - ./k6:/k6
#    working_dir: /k6/scripts
#    networks:
#      - backend-network
  loki:
    image: grafana/loki:2.9.4
    container_name: monitoring_loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - backend-network

  promtail:
    image: grafana/promtail:2.9.4
    container_name: monitoring_promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki
    networks:
      - backend-network


volumes:
  postgres_auth_data:
  mongo_auth_data:
  postgres_courses_data:
  postgres_assignment_data:
  mongo_resource_data:

networks:
  backend-network:
    driver: bridge